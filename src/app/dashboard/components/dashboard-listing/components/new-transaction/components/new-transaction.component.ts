import { Component, OnInit, OnDestroy } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { NewTransactionService } from '../services/new-transaction.service';
import { Subscription } from 'rxjs';
import { ValidationMessages } from '../validations/validators'
import { NewTransaction } from '../model/transaction.model';
import { ToastrService } from 'ngx-toastr';
import { Router } from '@angular/router';

@Component({
  selector: 'app-new-transaction',
  templateUrl: './new-transaction.component.html',
  styleUrls: ['./new-transaction.component.css']
})
export class NewTransactionComponent implements OnInit, OnDestroy {
  transactionForm: FormGroup;
  submitted: boolean = false;
  releaseCustomerData: Subscription;
  releaseSubmitSubscription: Subscription;
  validationsMessages = ValidationMessages;
  currencyList = ['AED', 'EUR', 'CHF', 'MUR', 'USD'];
  seqNo: any;
  newtransaction: NewTransaction = new NewTransaction;
  sequenceVal: any = 1;
  customerObj = [];

  constructor(private formBuilder: FormBuilder, private newTransactionService: NewTransactionService,
    private toastr: ToastrService, private router: Router) { }

  // creating form-group here.
  get objTransaction(): FormGroup { return this.transactionForm.get('newTransaction') as FormGroup; }


  /*
    Name Of Author : Ketan Pande
    Function Name : ngOnDestroy()
    Description : It is one of the lifecycle in angular. Unsubscribing all the subscribe values of 
                  observable here.  
  */
  ngOnDestroy() {
    if (this.releaseCustomerData) { this.releaseCustomerData.unsubscribe() };
    if (this.releaseSubmitSubscription) { this.releaseSubmitSubscription.unsubscribe() };
  }


  /*
    Name Of Author : Ketan Pande
    Function Name : ngOnInit()
    Description : It is one of the lifecycle in angular. Initializing all the input form-fields
                  here. Also, the reference number sequence number logic is defined here. 
  */
  ngOnInit() {
    this.createForm();

  }

  /*
    Name Of Author : Ketan Pande
    Function Name : yyyymmdd()
    Description : This function returns the date in YYYYMMDD format as it is required for reference number 
                  generation logic.
  */
  yyyymmdd() {
    var now = new Date();
    var y = now.getFullYear();
    var m = now.getMonth() + 1;
    var d = now.getDate();
    return '' + y + (m < 10 ? '0' : '') + m + (d < 10 ? '0' : '') + d;
  }


  /*
   Name Of Author : Ketan Pande
   Function Name : createForm()
   Description : Initilization of all form-fields done here. I have created from-group (newTransaction)
                  and in that form-group,I have initialized all the form-control names. Storing the values in
                  localstorage here for the reference number sequence logic, so that it will fetch the previous
                  last digit value of reference and then increment that value by one. So that will get proper
                  incremented sequence number digit at the end ofrefernce number.   
                  
 */
  createForm() {
    this.transactionForm = this.formBuilder.group({
      newTransaction: this.formBuilder.group(
        this.setTransactionInformation()
      )
    });

    let formatedDate: any = this.yyyymmdd();
    this.sequenceVal = (localStorage.getItem('id') ? localStorage.getItem('id') : 1);
    this.objTransaction.patchValue({ ['reference']: (formatedDate + this.sequenceVal) }); // autogenerated reference number
  }

  /*
   Name Of Author : Ketan Pande
   Function Name : setTransactionInformation()
   Description : Initializing and returning the form-control names here to the form-group.
 */
  setTransactionInformation() {
    return {
      reference: [''],

      customer_number: [''],
      customer_name: [''],
      address: [''],
      phone: ['', Validators.required],
      transfer_amount: ['', Validators.required],
      transfer_currency: [''],
      beneficiary_bank: [''],
      beneficiary_accno: [''],
      payment_details: ['']
    }
  }

  /*
    Name Of Author : Ketan Pande
    Function Name : back()
    Description : Called when we click on back button on screen and navigates to dashboard page.
  */
  back() {
    this.router.navigate(['/dashboard'])
  }

  /*
    Name Of Author : Ketan Pande
    Function Name : getCustomerInfo()
    Description : Getting the customer-name, address and phone number from the customer.json file
                   after entering customer-number by user. I have taken three json objects in json file.
                   This function will check the customer number enter by user, if its exists in customer.json
                   file, it will return its respective customer-name, address and phone number. Else if it's not
                   there, then it will throw an error message on screen. 
                   It will fetch the customer info from file only when user enters all the five digit customer
                   number from customer.json file.  
  */
  getCustomerInfo() {
    this.releaseCustomerData = this.newTransactionService.getCustomerJsonData().subscribe(customerData => {
      if (customerData && 'responseXML' in customerData && 'getCustomerInfoResponse' in customerData.responseXML &&
        'getCustomerInfoResult' in customerData.responseXML.getCustomerInfoResponse &&
        Object.keys(customerData.responseXML.getCustomerInfoResponse.getCustomerInfoResult).length > 0) {
        let extractObj: any = customerData.responseXML.getCustomerInfoResponse.getCustomerInfoResult;
        this.checkCustomerNumber(extractObj);
        this.objTransaction.patchValue({ ['customer_name']: ('SHORT_NAME' in this.customerObj && this.customerObj['SHORT_NAME'] != '' ? this.customerObj['SHORT_NAME'] : '') });
        this.objTransaction.patchValue({ ['address']: ('STREET_ADDR' in this.customerObj && this.customerObj['STREET_ADDR'] != '' ? this.customerObj['STREET_ADDR'] : '') });
        this.objTransaction.patchValue({
          ['phone']: ('CONTACT_INFO_V7' in this.customerObj && 'CONTACT_INFO_V7' in this.customerObj['CONTACT_INFO_V7'] && 'PHONE_LIST_V7' in this.customerObj['CONTACT_INFO_V7']['CONTACT_INFO_V7']
            && 'PHONE_LIST_ITEM_V7' in this.customerObj['CONTACT_INFO_V7']['CONTACT_INFO_V7']['PHONE_LIST_V7'] && this.customerObj['CONTACT_INFO_V7']['CONTACT_INFO_V7']
            ['PHONE_LIST_V7']['PHONE_LIST_ITEM_V7']['PHONE'] != '' ? this.customerObj['CONTACT_INFO_V7']['CONTACT_INFO_V7']
            ['PHONE_LIST_V7']['PHONE_LIST_ITEM_V7']['PHONE'] : '')
        });

      }

    })
  }


  /*
   Name Of Author : Ketan Pande
   Function Name : checkCustomerNumber()
   Description : This function checks the customer number entered by user in customer.json file, and 
                 if it matches, then it will return that specific customer object.
 */
  checkCustomerNumber(extractObj) {
    let matchFlag: boolean = false;
    for (let i = 1; i < Object.keys(extractObj).length - 2; i++) {
      let key = 'CUST_INFO_' + i;
      if (extractObj[key].CUST_NO === this.objTransaction.value['customer_number']) {
        this.customerObj = extractObj[key];
        matchFlag = true;
        return matchFlag;
      }
      else {
        matchFlag = false;
      }
    }
    if (!matchFlag) {
      this.toastr.error("Customer Number Does Not Exist!");
      return matchFlag;
    }
  }

  /*
    Name Of Author : Ketan Pande
    Function Name : fetchCustomerData()
    Description : This function is called after entering the value in customer number field.
                   or when you press enter after entering value of customer number. I have made api call
                   to the file only when length of number is 5. otherwise it will not unncessary hits and loads
                   the file. When user removes the number, it will also clear respective the form fields.  
  */
  fetchCustomerData(event) {
    if (event.length >= 5) {
      this.getCustomerInfo();
    }
    else {
      if (event.length === 0) {
        this.objTransaction.patchValue({ ['phone']: ('') });
        this.objTransaction.patchValue({ ['customer_name']: ('') });
        this.objTransaction.patchValue({ ['address']: ('') });

      }
    }

  }

  /*
   Name Of Author : Ketan Pande
   Function Name : submitTransactionDetails()
   Description : This function is called after clicking on submit button on screen.               
 */

  submitTransactionDetails() {
    this.submitted = true;
    if (this.transactionForm.invalid) {
      return;
    }
    this.submitAllTransactionDetails();
  }

  /*
  Name Of Author : Ketan Pande
  Function Name : submitAllTransactionDetails()
  Description : This function is used for submitting all the new transaction related information entered
                by the user to the REST API. Also, the logic of incrementing the refernce sequence number
                is done here. Storing data in model and then sending it to the API.           
*/
  submitAllTransactionDetails() {
    let customerObj = {
      customer_number : this.objTransaction.value['customer_number'],
      customer_name : this.objTransaction.value['customer_name'],
      phone : this.objTransaction.value['phone'],
      address : this.objTransaction.value['address'],
    }
    this.newtransaction.newTransactionInfo.custermerInfo = customerObj;
    this.newtransaction.newTransactionInfo.reference = this.objTransaction.value['reference'];
    this.newtransaction.newTransactionInfo.transfer_amount = this.objTransaction.value['transfer_amount'];
    this.newtransaction.newTransactionInfo.transfer_currency = this.objTransaction.value['transfer_currency'];
    this.newtransaction.newTransactionInfo.payment_details = this.objTransaction.value['payment_details'];
    this.newtransaction.newTransactionInfo.beneficiary_bank = this.objTransaction.value['beneficiary_bank'];
    this.newtransaction.newTransactionInfo.beneficiary_accno = this.objTransaction.value['beneficiary_accno']
    this.releaseSubmitSubscription = this.newTransactionService.submitNewTransactionDetails(this.newtransaction.newTransactionInfo).subscribe(data => {
      if (data && 'id' in data) {
        this.sequenceVal = parseInt(this.sequenceVal) + 1;
        console.log("seq", this.sequenceVal);
        let a: any = this.sequenceVal
        localStorage.setItem('id', a)
        this.toastr.success("Transaction Added Successfully!");
        this.router.navigate(['dashboard'])
      }
      else {
        this.toastr.error("Something Went Wrong!")
      }
    }, error => {
      this.toastr.error(error);
    }, () => {
      // complete state of a subscribe cycle.
    });
  }

  /*
 Name Of Author : Ketan Pande
 Function Name : resetForm()
 Description : This function will reset all the fields of the form, except refernce number field, as that field 
               is auto generated. Also, removing the unnecessary validations on button click here.          
*/
  resetForm() {
    this.objTransaction.get('phone').clearValidators();
    this.objTransaction.get('transfer_amount').clearValidators();
    this.objTransaction.patchValue({ ['customer_number']: ('') });
    this.objTransaction.patchValue({ ['phone']: ('') });
    this.objTransaction.patchValue({ ['customer_name']: ('') });
    this.objTransaction.patchValue({ ['address']: ('') });
    this.objTransaction.patchValue({ ['transfer_amount']: ('') });
    this.objTransaction.patchValue({ ['transfer_currency']: ('') });
    this.objTransaction.patchValue({ ['beneficiary_bank']: ('') });
    this.objTransaction.patchValue({ ['beneficiary_accno']: ('') });
    this.objTransaction.patchValue({ ['payment_details']: ('') });

  }

}
